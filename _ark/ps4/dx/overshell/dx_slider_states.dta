(dxState_SongSpeed
   (view confirm_action) 
   (enter 
      {$this setup_confirm_actions {sprintf 'Song Speed: %d%%' $speedmod} ('+' 'Reset' '-')}
   )
   (SELECT_MSG 
      {local $list_data {($objId UIListCom) get_data_in_column token}}  
      {switch $list_data 
         ('+'
            {set $speedmod {+ $speedmod 5}}
            {$this setup_confirm_actions {sprintf 'Song Speed: %d%%' $speedmod} ('+' 'Reset' '-')}
         )
         ('Reset'
            {set $speedmod 100}
            {$this setup_confirm_actions {sprintf 'Song Speed: %d%%' $speedmod} ('+' 'Reset' '-')}
         )
         ('-'
            {unless {< {- $speedmod 5} 100}
               {set $speedmod {- $speedmod 5}}
            }
            {$this setup_confirm_actions {sprintf 'Song Speed: %d%%' $speedmod} ('+' 'Reset' '-')}
         )

         })
   (on_cancel 
      {set_elem {find $syscfg beatmatcher watcher slop} 1 $speedmod}
      {write_file 'data:/GoldHEN/RB4DX/speedmod.ini' {array ({/ $speedmod 100})}}
      SET_TRACK_SPEEDS
      {$this show_state dxState_DeluxeSettings}
      {$this trigger_cancel_effects})
)

(dxState_VideoCalibration
   (view confirm_action) 
   (enter 
      {$this setup_confirm_actions {sprintf 'Video Calibration: %d ms' {* {get_video_calibration} -1}} ('+' 'Reset' '-')}
   )
   (SELECT_MSG 
      {local $list_data {($objId UIListCom) get_data_in_column token}}  
      {switch $list_data 
         ('+'
            {unless {< {- {get_video_calibration} 1} -300}
               {set_video_calibration {- {get_video_calibration} 1}}
            }
            {$this setup_confirm_actions {sprintf 'Video Calibration: %d ms' {* {get_video_calibration} -1}} ('+' 'Reset' '-')}
         )
         ('Reset'
            {set_video_calibration 0}
            {$this setup_confirm_actions {sprintf 'Video Calibration: %d ms' {* {get_video_calibration} -1}} ('+' 'Reset' '-')}
         )
         ('-'
            {unless {> {+ {get_video_calibration} 1} 300}
               {set_video_calibration {+ {get_video_calibration} 1}}
            }
            {$this setup_confirm_actions {sprintf 'Video Calibration: %d ms' {* {get_video_calibration} -1}} ('+' 'Reset' '-')}
         )
      }
   )
   (on_cancel 
      {write_file 'data:/GoldHEN/RB4DX/videocalib.ini' {array ({get_video_calibration})}}
      {$this show_state dxState_CalibrationSelector}
      {$this trigger_cancel_effects}
   )
)

(dxState_AudioCalibration
   (view confirm_action) 
   (enter 
      {$this setup_confirm_actions {sprintf 'Audio Calibration: %d ms' {* {get_audio_calibration} -1}} ('+' 'Reset' '-')}
   )
   (SELECT_MSG 
      {local $list_data {($objId UIListCom) get_data_in_column token}}  
      {switch $list_data 
         ('+'
            {unless {< {- {get_audio_calibration} 1} -300}
               {set_audio_calibration {- {get_audio_calibration} 1}}
            }
            {$this setup_confirm_actions {sprintf 'Audio Calibration: %d ms' {* {get_audio_calibration} -1}} ('+' 'Reset' '-')}
         )
         ('Reset'
            {set_audio_calibration 0}
            {$this setup_confirm_actions {sprintf 'Audio Calibration: %d ms' {* {get_audio_calibration} -1}} ('+' 'Reset' '-')}
         )
         ('-'
            {unless {> {+ {get_audio_calibration} 1} 300}
               {set_audio_calibration {+ {get_audio_calibration} 1}}
            }
            {$this setup_confirm_actions {sprintf 'Audio Calibration: %d ms' {* {get_audio_calibration} -1}} ('+' 'Reset' '-')}
         )
      }
   )
   (on_cancel 
      {write_file 'data:/GoldHEN/RB4DX/audiocalib.ini' {array ({get_audio_calibration})}}
      {$this show_state dxState_CalibrationSelector}
      {$this trigger_cancel_effects}
   )
)

(dxState_TrackCurve
   (view confirm_action) 
   (enter 
      {$this setup_confirm_actions {sprintf 'Track Curve: %.2fX' {+ {* $track_curve -2} 3}} ('+' 'Reset' '-')}
   )
   (SELECT_MSG 
      {local $list_data {($objId UIListCom) get_data_in_column token}}  
      {switch $list_data 
         ('-'
            {unless {> {+ $track_curve 0.05} 1.5}
               {set $track_curve {+ $track_curve 0.05}}
            }
            {$this setup_confirm_actions {sprintf 'Track Curve: %.2fX' {+ {* $track_curve -2} 3}} ('+' 'Reset' '-')}
         )
         ('Reset'
            {set $track_curve 1}
            {$this setup_confirm_actions {sprintf 'Track Curve: %.2fX' {+ {* $track_curve -2} 3}} ('+' 'Reset' '-')}
         )
         ('+'
            {unless {< {- $track_curve 0.05} 0.45}
               {set $track_curve {- $track_curve 0.05}}
            }
            {$this setup_confirm_actions {sprintf 'Track Curve: %.2fX' {+ {* $track_curve -2} 3}} ('+' 'Reset' '-')}
         )

         })
   (on_cancel 
      {$this show_state dxState_TrkSettings}
      {$this trigger_cancel_effects})
)

(dxState_HighwayLength
   (view confirm_action) 
   (enter 
      {$this setup_confirm_actions
         {sprintf 
            'Highway Length: %.2fX' 
            {if_else {> $hwlength 1}
               {+ {* $hwlength -0.333333333333333} 1.333333333333333}
               {+ {* $hwlength -1.25} 2.25}
            }
            $hwlength
         }
         ('+' 'Reset' '-')
      }
   )
   (SELECT_MSG 
      {local $list_data {($objId UIListCom) get_data_in_column token}}  
      {switch $list_data 
         ('-'
            {unless {> {+ $hwlength 0.05} 2.54}
               {set $hwlength {+ $hwlength 0.05}}
            }
            {if_else {< $hwlength 0.74}
               {if {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                  {unless {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
                     {dx_file_rename 'ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4' 'ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
                  }
               }
               {if {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
                  {unless {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                     {dx_file_rename 'ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4' 'ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                  }
               }
            }
            {$this setup_confirm_actions
               {sprintf 
                  'Highway Length: %.2fX' 
                  {if_else {> $hwlength 1}
                     {+ {* $hwlength -0.333333333333333} 1.333333333333333}
                     {+ {* $hwlength -1.25} 2.25}
                  }
               }
               ('+' 'Reset' '-')
            }
         )
         ('Reset'
            {set $hwlength 1}
            {if {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
               {unless {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                  {dx_file_rename 'ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4' 'ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
               }
            }
            {$this setup_confirm_actions
               {sprintf 
                  'Highway Length: %.2fX' 
                  {if_else {> $hwlength 1}
                     {+ {* $hwlength -0.333333333333333} 1.333333333333333}
                     {+ {* $hwlength -1.25} 2.25}
                  }
               }
               ('+' 'Reset' '-')
            }
         )
         ('+'
            {unless {< {- $hwlength 0.05} 0.56}
               {set $hwlength {- $hwlength 0.05}}
            }
            {if_else {< $hwlength 0.74}
               {if {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                  {unless {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
                     {dx_file_rename 'ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4' 'ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
                  }
               }
               {if {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4'}
                  {unless {file_exists 'data:/GoldHen/RB4DX-1.08/ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                     {dx_file_rename 'ps4/track/smasher/fretboard.fbx++mesh++fretboard_ps4' 'ps4/track/smasher/fretboard1.fbx++mesh++fretboard_ps4'}
                  }
               }
            }
            {$this setup_confirm_actions
               {sprintf 
                  'Highway Length: %.2fX' 
                  {if_else {> $hwlength 1}
                     {+ {* $hwlength -0.333333333333333} 1.333333333333333}
                     {+ {* $hwlength -1.25} 2.25}
                  }
               }
               ('+' 'Reset' '-')
            }
         )

         })
   (on_cancel 
      {$this show_state dxState_TrkSettings}
      {$this trigger_cancel_effects})
)

#define RGB_DATA
(
   {switch $gemchanged
      ('Green'
         {switch $gemcolchanged
            (R
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolgr} ('+' '0' '-')}
            )
            (G
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolgg} ('+' '0' '-')}
            )
            (B
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolgb} ('+' '0' '-')}
            )
         }
      )
      ('Red'
         {switch $gemcolchanged
            (R
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolrr} ('+' '0' '-')}
            )
            (G
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolrg} ('+' '0' '-')}
            )
            (B
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolrb} ('+' '0' '-')}
            )
         }
      )
      ('Yellow'
         {switch $gemcolchanged
            (R
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolyr} ('+' '0' '-')}
            )
            (G
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolyg} ('+' '0' '-')}
            )
            (B
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolyb} ('+' '0' '-')}
            )
         }
      )
      ('Blue'
         {switch $gemcolchanged
            (R
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolbr} ('+' '0' '-')}
            )
            (G
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolbg} ('+' '0' '-')}
            )
            (B
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolbb} ('+' '0' '-')}
            )
         }
      )
      ('Orange'
         {switch $gemcolchanged
            (R
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolor} ('+' '0' '-')}
            )
            (G
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolog} ('+' '0' '-')}
            )
            (B
               {$this setup_confirm_actions {sprintf 'Gem Color: %d' $gemcolob} ('+' '0' '-')}
            )
         }
      )
   }
)
#define RGB_ADD
(
   {switch $gemchanged
      ('Green'
         {switch $gemcolchanged
            (R
               {unless {> {+ $gemcolgr 1} 255}
                  {set $gemcolgr {+ $gemcolgr 1}}
               }
            )
            (G
               {unless {> {+ $gemcolgg 1} 255}
                  {set $gemcolgg {+ $gemcolgg 1}}
               }
            )
            (B
               {unless {> {+ $gemcolgb 1} 255}
                  {set $gemcolgb {+ $gemcolgb 1}}
               }
            )
         }
      )
      ('Red'
         {switch $gemcolchanged
            (R
               {unless {> {+ $gemcolrr 1} 255}
                  {set $gemcolrr {+ $gemcolrr 1}}
               }
            )
            (G
               {unless {> {+ $gemcolrg 1} 255}
                  {set $gemcolrg {+ $gemcolrg 1}}
               }
            )
            (B
               {unless {> {+ $gemcolrb 1} 255}
                  {set $gemcolrb {+ $gemcolrb 1}}
               }
            )
         }
      )
      ('Yellow'
         {switch $gemcolchanged
            (R
               {unless {> {+ $gemcolyr 1} 255}
                  {set $gemcolyr {+ $gemcolyr 1}}
               }
            )
            (G
               {unless {> {+ $gemcolyg 1} 255}
                  {set $gemcolyg {+ $gemcolyg 1}}
               }
            )
            (B
               {unless {> {+ $gemcolyb 1} 255}
                  {set $gemcolyb {+ $gemcolyb 1}}
               }
            )
         }
      )
      ('Blue'
         {switch $gemcolchanged
            (R
               {unless {> {+ $gemcolbr 1} 255}
                  {set $gemcolbr {+ $gemcolbr 1}}
               }
            )
            (G
               {unless {> {+ $gemcolbg 1} 255}
                  {set $gemcolbg {+ $gemcolbg 1}}
               }
            )
            (B
               {unless {> {+ $gemcolbb 1} 255}
                  {set $gemcolbb {+ $gemcolbb 1}}
               }
            )
         }
      )
      ('Orange'
         {switch $gemcolchanged
            (R
               {unless {> {+ $gemcolor 1} 255}
                  {set $gemcolor {+ $gemcolor 1}}
               }
            )
            (G
               {unless {> {+ $gemcolgg 1} 255}
                  {set $gemcolog {+ $gemcolog 1}}
               }
            )
            (B
               {unless {> {+ $gemcolgb 1} 255}
                  {set $gemcolob {+ $gemcolob 1}}
               }
            )
         }
      )
   }
)
#define RGB_SUB
(
   {switch $gemchanged
      ('Green'
         {switch $gemcolchanged
            (R
               {unless {< {- $gemcolgr 1} 0}
                  {set $gemcolgr {- $gemcolgr 1}}
               }
            )
            (G
               {unless {< {- $gemcolgg 1} 0}
                  {set $gemcolgg {- $gemcolgg 1}}
               }
            )
            (B
               {unless {< {- $gemcolgb 1} 0}
                  {set $gemcolgb {- $gemcolgb 1}}
               }
            )
         }
      )
      ('Red'
         {switch $gemcolchanged
            (R
               {unless {< {<- $gemcolrr 1} 0}
                  {set $gemcolrr {<- $gemcolrr 1}}
               }
            )
            (G
               {unless {< {<- $gemcolrg 1} 0}
                  {set $gemcolrg {<- $gemcolrg 1}}
               }
            )
            (B
               {unless {< {<- $gemcolrb 1} 0}
                  {set $gemcolrb {<- $gemcolrb 1}}
               }
            )
         }
      )
      ('Yellow'
         {switch $gemcolchanged
            (R
               {unless {< {<- $gemcolyr 1} 0}
                  {set $gemcolyr {<- $gemcolyr 1}}
               }
            )
            (G
               {unless {< {<- $gemcolyg 1} 0}
                  {set $gemcolyg {<- $gemcolyg 1}}
               }
            )
            (B
               {unless {< {<- $gemcolyb 1} 0}
                  {set $gemcolyb {<- $gemcolyb 1}}
               }
            )
         }
      )
      ('Blue'
         {switch $gemcolchanged
            (R
               {unless {< {<- $gemcolbr 1} 0}
                  {set $gemcolbr {<- $gemcolbr 1}}
               }
            )
            (G
               {unless {< {<- $gemcolbg 1} 0}
                  {set $gemcolbg {<- $gemcolbg 1}}
               }
            )
            (B
               {unless {< {<- $gemcolbb 1} 0}
                  {set $gemcolbb {<- $gemcolbb 1}}
               }
            )
         }
      )
      ('Orange'
         {switch $gemcolchanged
            (R
               {unless {< {<- $gemcolor 1} 0}
                  {set $gemcolor {<- $gemcolor 1}}
               }
            )
            (G
               {unless {< {<- $gemcolgg 1} 0}
                  {set $gemcolog {<- $gemcolog 1}}
               }
            )
            (B
               {unless {< {<- $gemcolgb 1} 0}
                  {set $gemcolob {<- $gemcolob 1}}
               }
            )
         }
      )
   }
)
#define RGB_RESET
(
   {switch $gemchanged
      ('Green'
         {switch $gemcolchanged
            (R
               {set $gemcolgr 0}
            )
            (G
               {set $gemcolgg 0}
            )
            (B
               {set $gemcolgb 0}
            )
         }
      )
      ('Red'
         {switch $gemcolchanged
            (R
               {set $gemcolrr 0}
            )
            (G
               {set $gemcolrg 0}
            )
            (B
               {set $gemcolrb 0}
            )
         }
      )
      ('Yellow'
         {switch $gemcolchanged
            (R
               {set $gemcolyr 0}
            )
            (G
               {set $gemcolyg 0}
            )
            (B
               {set $gemcolyb 0}
            )
         }
      )
      ('Blue'
         {switch $gemcolchanged
            (R
               {set $gemcolbr 0}
            )
            (G
               {set $gemcolbg 0}
            )
            (B
               {set $gemcolbb 0}
            )
         }
      )
      ('Orange'
         {switch $gemcolchanged
            (R
               {set $gemcolor 0}
            )
            (G
               {set $gemcolog 0}
            )
            (B
               {set $gemcolob 0}
            )
         }
      )
   }
)
(dxState_RGBSlider
   (view confirm_action) 
   (enter 
      RGB_DATA
   )
   (SELECT_MSG 
      {local $list_data {($objId UIListCom) get_data_in_column token}}  
      {switch $list_data 
         ('+'
            RGB_ADD
            RGB_DATA
         )
         ('0'
            RGB_RESET
            RGB_DATA
         )
         ('-'
            RGB_SUB
            RGB_DATA
         )
      }
   )
   (on_cancel 
      {$this show_state dxState_RGBSelect}
      {$this trigger_cancel_effects})
)